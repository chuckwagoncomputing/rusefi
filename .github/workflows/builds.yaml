name: rusEFI build tasks

on: [push, pull_request]

env:
  RUSEFI_SKIP_UPLOAD: ${{github.event.pusher}}"false"

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    
    strategy:
      # Let all builds finish even if one fails early
      fail-fast: false
      matrix:
        # What boards should we build for? In the 'include' section below,
        # set up what each of these boards needs to build.
        build-target: [frankenso_na6, kinetis, mre_f4, mre_f4_hardware_QC_special_build, mre_f7, prometheus_405, prometheus_469, proteus_f4, proteus_f7, stm32f746_nucleo, stm32f767_nucleo, stm32f767_osc]
        
        include:
          # Board configurations
          - build-target: frankenso_na6
            folder: frankenso
            
          - build-target: kinetis
            folder: kinetis

          - build-target: mre_f4
            folder: microrusefi
            ini-file: rusefi_microrusefi.ini

          - build-target: mre_f4_hardware_QC_special_build
            folder: microrusefi
            ini-file: rusefi_microrusefi.ini
            
          - build-target: mre_f7
            folder: microrusefi
            ini-file: rusefi_microrusefi.ini
            console-settings: firmware/config/boards/nucleo_f767/rusefi_console_properties.xml

          - build-target: prometheus_405
            folder: prometheus

          - build-target: prometheus_469
            folder: prometheus

          - build-target: proteus_f4
            folder: proteus
            ini-file: rusefi_proteus.ini

          - build-target: proteus_f7
            folder: proteus
            ini-file: rusefi_proteus.ini

          - build-target: stm32f746_nucleo
            folder: nucleo_f746

          - build-target: stm32f767_nucleo
            folder: nucleo_f767

          - build-target: stm32f767_osc
            folder: nucleo_f767

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
  
    - name: Generate Configs
      working-directory: ./firmware/
      run: sh gen_config.sh

    - name: Generate Live Documentation
      working-directory: ./firmware/
      run: sh gen_live_documentation.sh

    # Build machines don't have arm-none-eabi gcc, so let's download it and put it on the path
    - name: Download & Install GCC
      run: | # Compiler hosted on our other git repo - avoids having to download from the nice folks at ARM every time
        wget 'https://github.com/rusefi/build_support/raw/master/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.xz' -O compiler.tar.xz
        tar -xvf compiler.tar.xz
        echo "::add-path::`pwd`/gcc-arm-none-eabi-9-2019-q4-major/bin"
  
    # Make sure the compiler we just downloaded works - just print out the version
    - name: Test Compiler
      run: arm-none-eabi-gcc -v
  
    # Build the firmware!
    - name: Build Firmware
      run: sh misc/jenkins/compile_other_versions/compile_and_upload.sh ${{matrix.folder}} ${{matrix.build-target}} ${{matrix.ini-file}} ${{matrix.console-settings}}
      
  build-primary-bundle:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive

    - name: Generate Configs
      working-directory: ./firmware/
      run: sh gen_config.sh

    - name: Generate Live Documentation
      working-directory: ./firmware/
      run: sh gen_live_documentation.sh

    # Build machines don't have arm-none-eabi gcc, so let's download it and put it on the path
    - name: Download & Install GCC
      run: | # Compiler hosted on our other git repo - avoids having to download from the nice folks at ARM every time
        wget 'https://github.com/rusefi/build_support/raw/master/gcc-arm-none-eabi-9-2019-q4-major-x86_64-linux.tar.xz' -O compiler.tar.xz
        tar -xvf compiler.tar.xz
        echo "::add-path::`pwd`/gcc-arm-none-eabi-9-2019-q4-major/bin"
  
    # Make sure the compiler we just downloaded works - just print out the version
    - name: Test Compiler
      run: arm-none-eabi-gcc -v

    - name: Build Primary Bundle
      run: sh misc/jenkins/functional_test_and_build_bundle/build_current_bundle.sh
